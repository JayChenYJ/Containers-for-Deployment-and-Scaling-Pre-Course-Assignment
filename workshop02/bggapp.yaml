---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-deploy
  namespace: bggns
  labels:
    app: app-deploy
    name: app-deploy
spec:
  strategy: 
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  replicas: 3
  selector:
    matchLabels:
      app: myapp
      commit: app001
  template:
    metadata: 
      name: myapppod
      namespace: bggns
      labels:
        app: myapp
        commit: app001
    spec:
      containers:
      - name: myapppo-container
        image: stackupiss/bgg-backend:v1
        imagePullPolicy: IfNotPresent
        ports:
        - name: app-port
          containerPort: 3000
        readinessProbe:
          httpGet:
            path: /ready
            port: app-port
          timeoutSeconds: 5
          failureThreshold: 1
        livenessProbe:
          httpGet:
            path: /
            port: app-port
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        env:
        - name: BGG_DB_USER
          valueFrom:
            secretKeyRef:
              name: myapp-secret
              key: BGG_DB_USER
        - name: BGG_DB_HOST
          valueFrom:
            configMapKeyRef:
              name: myapp-config
              key: BGG_DB_HOST
        - name: BGG_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: myapp-secret
              key: BGG_DB_PASSWORD

# svc create name in DNS
# <service name>.<namespace>.svc.cluster.local
# example : dov-svc.myns.svc.cluster.local:8080
---
apiVersion: v1
kind: Service
metadata:
  name: bggapp-svc
  namespace: bggns
  labels:
    app: bggapp
    name: bggapp-svc
spec:
  type: ClusterIP
  #type: NodePort
  #type: LoadBalancer
  selector: 
    app: myapp
    commit: app001
  ports:
  - port: 3000           # service port
    targetPort: app-port  # container port